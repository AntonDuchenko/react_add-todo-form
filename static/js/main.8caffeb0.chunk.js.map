{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","App","useState","setTitle","choosedUser","setChoosedUser","isNotValidTitle","setIsNotValidTitle","isNotValidChoosedUser","setIsNotValidChoosedUser","todosFromServer","visibleTodos","setVisibleTodos","todoWithUser","usersFromServer","find","action","method","onSubmit","event","preventDefault","trim","Math","max","onChange","target","value","onChangeTitle","placeholder","type","onChangeUser","defaultValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8caffeb0.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ninterface Props {\n  user: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { TodoWithUser } from '../../types/TodoWithUser';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n      <UserInfo user={user} />\n    </article>\n  );\n};\n","import { TodoWithUser } from '../../types/TodoWithUser';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: TodoWithUser[]\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        return (\n          <TodoInfo\n            key={todo.id}\n            todo={todo}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [choosedUser, setChoosedUser] = useState(0);\n  const [isNotValidTitle, setIsNotValidTitle] = useState(false);\n  const [isNotValidChoosedUser, setIsNotValidChoosedUser] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState(todosFromServer);\n\n  const getMaxId = () => {\n    return Math.max(...visibleTodos.map(todos => todos.id));\n  };\n\n  const findUser = (id: number) => {\n    return usersFromServer.find(user => user.id === id) as User;\n  };\n\n  const todoWithUser = visibleTodos.map(todo => ({\n    ...todo,\n    user: findUser(todo.userId),\n  }));\n\n  const handleReset = () => {\n    setTitle('');\n    setChoosedUser(0);\n    setIsNotValidTitle(false);\n    setIsNotValidChoosedUser(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setIsNotValidTitle(true);\n      setTitle('');\n    }\n\n    if (!choosedUser) {\n      setIsNotValidChoosedUser(true);\n    }\n\n    if (title.trim() && choosedUser) {\n      setVisibleTodos([...visibleTodos, {\n        id: getMaxId() + 1,\n        title,\n        completed: false,\n        userId: choosedUser,\n      }]);\n      handleReset();\n    }\n  };\n\n  const onChangeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsNotValidTitle(false);\n  };\n\n  const onChangeUser = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setChoosedUser(+event.target.value);\n    setIsNotValidChoosedUser(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              onChange={event => onChangeTitle(event)}\n              value={title}\n              placeholder=\"Enter a title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n            />\n          </label>\n          {isNotValidTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              onChange={event => onChangeUser(event)}\n              data-cy=\"userSelect\"\n              defaultValue={0}\n              value={choosedUser}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isNotValidChoosedUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        todos={todoWithUser}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}