{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","todoUser","className","href","TodoInfo","todo","classNames","TodoList","visibleTodos","usersFromServer","map","find","user","App","useState","setTitle","choosedUser","setChoosedUser","isValidTitle","setIsValidTitle","isValidChoosedUser","setIsValidChoosedUser","todosFromServer","setVisibleTodos","action","method","onSubmit","event","preventDefault","trim","currentTodos","Math","max","todos","onChange","target","value","placeholder","type","defaultValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13b96845.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ninterface Props {\n  todoUser: User;\n}\n\nexport const UserInfo: React.FC<Props> = ({ todoUser }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${todoUser.email}`}>\n      {todoUser.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ninterface Props {\n  todoUser: User;\n  todo: Todo;\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todoUser, todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      <UserInfo todoUser={todoUser} />\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  visibleTodos: Todo[]\n  usersFromServer: User[]\n}\n\nexport const TodoList: React.FC<Props> = ({\n  visibleTodos,\n  usersFromServer,\n}) => {\n  const findUser = (id: number) => {\n    return usersFromServer.find(user => user.id === id) as User;\n  };\n\n  return (\n    <section className=\"TodoList\">\n      {visibleTodos.map(todo => {\n        const todoUser = findUser(todo.userId);\n\n        return (\n          <TodoInfo\n            key={todo.id}\n            todoUser={todoUser}\n            todo={todo}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [choosedUser, setChoosedUser] = useState(0);\n  const [isValidTitle, setIsValidTitle] = useState(false);\n  const [isValidChoosedUser, setIsValidChoosedUser] = useState(false);\n  const [visibleTodos, setVisibleTodos] = useState(todosFromServer);\n\n  const getMaxId = () => {\n    return Math.max(...visibleTodos.map(todos => todos.id));\n  };\n\n  const handleReset = () => {\n    setTitle('');\n    setChoosedUser(0);\n    setIsValidTitle(false);\n    setIsValidChoosedUser(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title.trim()) {\n      setIsValidTitle(true);\n      setTitle('');\n    }\n\n    if (!choosedUser) {\n      setIsValidChoosedUser(true);\n    }\n\n    if (title.trim() && choosedUser) {\n      setVisibleTodos(currentTodos => [...currentTodos, {\n        id: getMaxId() + 1,\n        title,\n        completed: false,\n        userId: choosedUser,\n      }]);\n      handleReset();\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              onChange={event => {\n                setTitle(event.target.value);\n                setIsValidTitle(false);\n              }}\n              value={title}\n              placeholder=\"Enter a title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n            />\n          </label>\n          {isValidTitle && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              onChange={event => {\n                setChoosedUser(+event.target.value);\n                setIsValidChoosedUser(false);\n              }}\n              data-cy=\"userSelect\"\n              defaultValue={0}\n              value={choosedUser}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map(user => (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isValidChoosedUser && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList\n        visibleTodos={visibleTodos}\n        usersFromServer={usersFromServer}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}